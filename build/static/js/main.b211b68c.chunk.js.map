{"version":3,"sources":["indicadores.png","componentes/Error.js","componentes/Formulario.js","componentes/Indicador.js","componentes/IndicadorFecha.js","componentes/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MensajeError","styled","p","Error","mensaje","Input","input","Boton","Formulario","guardarResultadoFecha","guardarCargando","useState","state","actualizarState","error","guardarError","consultaIndicador","e","a","preventDefault","url","axios","get","respuesta","setTimeout","data","onSubmit","type","name","onChange","target","value","ResultadoDiv","div","Info","Unidad","Indicador","resultado","Object","keys","length","key","date","unit","IndicadorFecha","resultadoFecha","Spinner","class","Contenedor","Imagen","img","Heading","h1","Label","label","App","guardarResultado","cargando","useEffect","cobre","consultarAPI","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b211b68c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/indicadores.96e45d69.png\";","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst MensajeError = styled.p`\n  background-color: #b7322c;\n  padding: 1rem;\n  color: #fff;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: bold;\n  text-align: center;\n  font-family: \"Bebas Neue\", cursive;\n`;\n\nconst Error = ({ mensaje }) => {\n  return <MensajeError>{mensaje}</MensajeError>;\n};\n\nexport default Error;\n","import React, { useState } from \"react\";\nimport Error from \"./Error\";\nimport axios from \"axios\";\nimport styled from \"@emotion/styled\";\n\nconst Input = styled.input`\n  width: 92%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border: none;\n  width: 100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #326ac0;\n    cursor: pointer;\n  }\n`;\n\nconst Formulario = ({ guardarResultadoFecha, guardarCargando }) => {\n  const [state, actualizarState] = useState(\"\");\n  const [error, guardarError] = useState(false);\n\n  const consultaIndicador = async e => {\n    e.preventDefault();\n    if (state === \"\") {\n      guardarError(true);\n      return;\n    }\n    const url = `/date/cobre/${state}`;\n    const respuesta = await axios.get(url);\n    guardarCargando(true);\n\n    setTimeout(() => {\n      guardarCargando(false);\n      guardarError(false);\n      guardarResultadoFecha(respuesta.data);\n    }, 3000);\n  };\n\n  return (\n    <form onSubmit={consultaIndicador}>\n      {error ? <Error mensaje=\"La fecha es obligatoria\" /> : null}\n      <Input\n        type=\"date\"\n        name=\"fecha\"\n        onChange={e => actualizarState(e.target.value)}\n        value={state}\n      />\n\n      <Boton type=\"submit\" value=\"Consultar\" />\n    </form>\n  );\n};\n\nexport default Formulario;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst ResultadoDiv = styled.div`\n  color: #fff;\n  font-family: Arial, Arial, Helvetica, sans-serif;\n  margin-bottom: 50px;\n`;\n\nconst Info = styled.p`\n  font-size: 18px;\n\n  span {\n    font-weight: bold;\n    text-transform: capitalize;\n  }\n`;\n\nconst Unidad = styled.p`\n  font-size: 30px;\n  span {\n    font-weight: bold;\n    text-transform: uppercase;\n  }\n`;\n\nconst Indicador = ({ resultado }) => {\n  if (Object.keys(resultado).length === 0) return null;\n\n  return (\n    <ResultadoDiv>\n      <Unidad>\n        Consulta: <span>{resultado.key}</span>{\" \"}\n      </Unidad>\n      <Info>\n        Fecha: <span>{resultado.date}</span>\n      </Info>\n      <Info>\n        Tipo de conversion: <span>{resultado.name}</span>{\" \"}\n      </Info>\n      <Info>\n        Divisa: <span>{resultado.unit}</span>{\" \"}\n      </Info>\n      <Info>\n        Valor: <span>{resultado.value}</span>{\" \"}\n      </Info>\n    </ResultadoDiv>\n  );\n};\n\nexport default Indicador;\n","import React from \"react\";\n\nimport styled from \"@emotion/styled\";\n\nconst ResultadoDiv = styled.div`\n  color: #fff;\n  font-family: Arial, Arial, Helvetica, sans-serif;\n  margin-bottom: 50px;\n`;\n\nconst Info = styled.p`\n  font-size: 18px;\n\n  span {\n    font-weight: bold;\n    text-transform: capitalize;\n  }\n`;\n\nconst Unidad = styled.p`\n  font-size: 30px;\n  span {\n    font-weight: bold;\n    text-transform: uppercase;\n  }\n`;\n\nconst IndicadorFecha = ({ resultadoFecha }) => {\n  if (Object.keys(resultadoFecha).length === 0) return null;\n\n  return (\n    <ResultadoDiv>\n      <Unidad>\n        Consulta:{\" \"}\n        <span>\n          {resultadoFecha.key === null ? \"Sin Resultado\" : resultadoFecha.key}\n        </span>{\" \"}\n      </Unidad>\n      <Info>\n        Fecha:{\" \"}\n        <span>\n          {resultadoFecha.date === null ? \"Sin Resultado\" : resultadoFecha.date}\n        </span>\n      </Info>\n      <Info>\n        Tipo de conversion:{\" \"}\n        <span>\n          {resultadoFecha.name === null ? \"Sin Resultado\" : resultadoFecha.name}\n        </span>{\" \"}\n      </Info>\n      <Info>\n        Divisa:{\" \"}\n        <span>\n          {resultadoFecha.unit === null ? \"Sin Resultado\" : resultadoFecha.unit}\n        </span>{\" \"}\n      </Info>\n      <Info>\n        Valor:{\" \"}\n        <span>\n          {resultadoFecha.value === null\n            ? \"Sin Resultado\"\n            : resultadoFecha.value}\n        </span>{\" \"}\n      </Info>\n    </ResultadoDiv>\n  );\n};\n\nexport default IndicadorFecha;\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = () => {\n  return (\n    <div class=\"sk-chase\">\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n      <div class=\"sk-chase-dot\"></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Formulario from \"./componentes/Formulario\";\nimport Indicador from \"./componentes/Indicador\";\nimport IndicadorFecha from \"./componentes/IndicadorFecha\";\nimport Spinner from \"./componentes/Spinner\";\nimport imagen from \"./indicadores.png\";\nimport styled from \"@emotion/styled\";\n\nconst Contenedor = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\nconst Label = styled.label`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: block;\n`;\n\nfunction App() {\n  const [resultado, guardarResultado] = useState({});\n  const [resultadoFecha, guardarResultadoFecha] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url = \"/last\";\n      const respuesta = await axios.get(url);\n      guardarResultado(respuesta.data.cobre);\n    };\n    consultarAPI();\n  }, []);\n\n  const componente = cargando ? (\n    <Spinner />\n  ) : (\n    <IndicadorFecha resultadoFecha={resultadoFecha} />\n  );\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt=\"imagen cripto\" />\n      </div>\n      <div>\n        <Heading>Consulta Indicador Económico</Heading>\n        <Label>Consulta del Día</Label>\n        <Indicador resultado={resultado} />\n  \n      </div>\n      <div>\n      <Heading>Consulta por fecha</Heading>\n      <Formulario\n          guardarResultadoFecha={guardarResultadoFecha}\n          guardarCargando={guardarCargando}\n        />\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}